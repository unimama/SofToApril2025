# BeadSystem Smart Contract Documentation

## Overview
**Contract Name:** `BeadSystem`

BeadSystem is a robust, gas-optimized smart contract for managing digital jewelry beads as NFTs. It includes features such as role-based access control, integration with Chainlink VRF and Oracle services, Shopify backend support, privacy-preserving URI handling, and Web2-IPFS repository mapping.

---

## Table of Contents
1. [Roles](#roles)
2. [Events](#events)
3. [Structs](#structs)
4. [Mappings](#mappings)
5. [Modifiers](#modifiers)
6. [Constructor](#constructor)
7. [Admin Functions](#admin-functions)
8. [VRF Functions](#vrf-functions)
9. [Metadata Oracle Functions](#metadata-oracle-functions)
10. [Repository Mapping Functions](#repository-mapping-functions)
11. [NFT Functions](#nft-functions)
12. [BDC Payment Functions](#bdc-payment-functions)
13. [Shopify Integration](#shopify-integration)
14. [Utility & View Functions](#utility--view-functions)

---

## Roles
- `ADMIN_ROLE`: General administrative control
- `MULTISIG_ROLE`: Critical ops and emergency control
- `ORACLE_ROLE`: Chainlink Oracle operations
- `AUTONOMOUS_ROLE`: Automation and internal ops
- `SHOPIFY_ROLE`: Shopify backend integration

---

## Events
- `BeadCreated(beadId, sku)`
- `BeadPreMinted(beadId, uri, timestamp)`
- `BeadMinted(beadId, tokenId, owner)`
- `BeadURIUpdated(beadId, tokenId, newUri, updater)`
- `OracleUpdated(newOracle)`
- `MetadataValidationRequested(requestId, beadId, uri)`
- `MetadataValidationSucceeded(beadId, validatedUri)`
- `Paused()` / `Unpaused()` / `PausedFor(duration)`
- `RepositoryMappingSet(beadId, web2Repo, ipfsHash)`
- `QueryFeeSet(newFee)`
- `BDCTokenSet(newToken)`
- `ShopifyBackendSet(backend, authorized)`
- `AuthorizedViewer(viewer, status)`
- `Web2ControllerChanged(newController)`

---

## Structs
- `Bead`: Bead metadata and URIs
- `RepositoryMapping`: Links Web2 repo with IPFS
- `RequestInfo`: Metadata validation info

---

## Mappings
- `beads[beadId]`: Maps bead ID to Bead struct
- `beadExists[beadId]`: Tracks unique bead IDs
- `tokenIdToBeadId[tokenId]`: Links NFTs to bead IDs
- `beadIdToTokenId[beadId]`: Reverse mapping
- `metadataRequests[requestId]`: Oracle validation requests
- `skuForRequestId[requestId]`: VRF bead generation
- `authorizedShopifyBackends[address]`: Permissions
- `authorizedViewers[address]`: Private access control
- `tokenEncryptionKeys[tokenId]`: Encryption for URIs

---

## Modifiers
- `whenNotPaused`: Validates operational status
- `onlyShopifyBackend`: Restricts Shopify functions

---

## Constructor
Initializes the contract, sets VRF and Oracle parameters, and assigns roles to multisig, Shopify backend, and Web2 controller.

---

## Admin Functions
- `setMetadataOracle(address)`
- `setOracleParams(address, bytes32, uint256)`
- `pause()` / `pauseFor(uint256)` / `checkAutomaticUnpause()` / `unpause()`
- `withdrawLink()` / `withdrawBDC(uint256, address)`
- `setWeb2Controller(address)`
- `setAuthorizedViewer(address, bool)` / `batchSetAuthorizedViewers(address[], bool[])`
- `setShopifyBackend(address, bool)`
- `setBDCToken(address)` / `setQueryFee(uint256)`

---

## VRF Functions
- `requestBeadId(string sku)` → Returns Chainlink VRF request ID
- `fulfillRandomness(bytes32, uint256)` → VRF callback for generating bead ID

---

## Metadata Oracle Functions
- `requestMetadataValidation(beadId, uriToCheck)`
- `fulfillMetadataCheck(requestId, status)` → Oracle callback

---

## Repository Mapping Functions
- `setRepositoryMapping(beadId, web2Repo, ipfsHash)`
- `queryRepositoryMapping(beadId)`
- `shopifyRepositoryQuery(user, beadId)`

---

## NFT Functions
- `preMintBead(beadId, uri)`
- `mintBead(beadId, recipient, accessKey)`
- `batchMintBeads(beadIds[], recipients[], accessKeys[])`

---

## BDC Payment Functions
- `payWithBDC(amount, recipient)`
- `verifyBDCBalance(user)`

---

## Shopify Integration
- `shopifyCreateAndPreMint(sku, requestId, beadId, uri)`
- `batchMintBeads(...)`

---

## Utility & View Functions
- `tokenURI(tokenId)` → Returns private/placeholder URI
- `getPrivateTokenURI(tokenId, accessKey)`
- `generateSignedAccessURL(tokenId, expiration)`
- `getBead(beadId)`
- `getBeadIdByTokenId(tokenId)`
- `getBeadURIs(beadId)`
- `totalSupply()`

### Helpers
- `stringToBytes32(string)` → Efficient conversion
- `toAsciiString(address)`
- `toString(uint256)`
- `toHexString(uint256)`

---

## Notes
- **Security:** Role-based controls and reentrancy protection
- **Gas Optimization:** bytes32 usage and efficient data access
- **Extensibility:** Modular design with well-separated concerns
- **Privacy:** Token URI visibility gated by ownership, encryption, and roles

---

_Last updated: April 2025_
